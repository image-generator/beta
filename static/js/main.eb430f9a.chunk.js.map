{"version":3,"sources":["services/api.js","Components/Canvas/index.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","Canvas","title","subtitle","verticalPosition","horizontalPosition","console","log","textPosition","display","justifyContent","textStyles","textAlign","color","width","margin","className","style","src","alt","App","useState","setTitle","setSubtitle","setVerticalPosition","setHorizontalPosition","pixabayKey","onClick","a","async","get","response","data","handleImageBackground","onChange","e","target","value","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAOeA,E,OAJHC,EAAMC,OAAO,CACrBC,QAAQ,4BC8CGC,G,MA/CA,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,MAAOC,EAAqD,EAArDA,SAAUC,EAA2C,EAA3CA,iBAAkBC,EAAyB,EAAzBA,mBAMjDC,QAAQC,IAAIH,EAAkBC,GAG9B,IAIMG,EAAe,CACjBC,QAAS,OACTC,eAAgBN,GAGdO,EAAa,CACfC,UAAWP,EACXQ,MAVe,OAWfC,MAAO,OACPC,OAAQ,GAGZ,OACI,0BAAMC,UAAU,cACZ,yBAAKA,UAAU,cACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAc,eAAL,WApBb,gBAoBgDC,MAAOT,GAEhD,wBAAIS,MAAON,GAAaT,GAGxB,uBAAGe,MAAON,GAAaR,MAKvC,yBAAKa,UAAU,iBACf,yBAAKA,UAAU,MACX,yBAAKE,IAxCA,6GAwCeC,IAAI,a,MCkBzBC,MAzDf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENnB,EAFM,KAECoB,EAFD,OAGmBD,mBAAS,IAH5B,mBAGNlB,EAHM,KAGIoB,EAHJ,OAImCF,mBAAS,IAJ5C,mBAINjB,EAJM,KAIYoB,EAJZ,OAKuCH,mBAAS,IALhD,mBAKNhB,EALM,KAKcoB,EALd,KAOPC,EAAa,oCAOnB,OACE,yBAAKV,UAAU,OAEb,4BAAQA,UAAU,UAChB,4BAAQW,QAAS,kBATvB,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACyB/B,EAAIiC,IAAJ,eAAgBJ,EAAhB,oDADzB,OACQK,EADR,OAEEzB,QAAQC,IAAIwB,EAASC,MAFvB,qCAS6BC,KAAvB,6BACA,yBAAKjB,UAAU,SACb,4CACA,2BAAOkB,SAAU,SAAAC,GAAC,OAAIb,EAASa,EAAEC,OAAOC,QAAQC,KAAK,OAAOD,MAAOnC,KAErE,yBAAKc,UAAU,SACb,+CACA,2BAAOkB,SAAU,SAAAC,GAAC,OAAIZ,EAAYY,EAAEC,OAAOC,QAAQC,KAAK,OAAOD,MAAOlC,KAExE,yBAAKa,UAAU,SACb,iDACA,4BAAQkB,SAAU,SAAAC,GAAC,OAAIX,EAAoBW,EAAEC,OAAOC,QAAQC,KAAK,OAAOD,MAAOjC,GAC7E,4BAAQiC,MAAM,IAAd,6BACA,4BAAQA,MAAM,cAAd,WACA,4BAAQA,MAAM,UAAd,aACA,4BAAQA,MAAM,YAAd,cAGJ,yBAAKrB,UAAU,SACb,mDACA,4BAAQkB,SAAU,SAAAC,GAAC,OAAIV,EAAsBU,EAAEC,OAAOC,QAAQC,KAAK,OAAOD,MAAOhC,GAC/E,4BAAQgC,MAAM,IAAd,6BACA,4BAAQA,MAAM,QAAd,eACA,4BAAQA,MAAM,UAAd,aACA,4BAAQA,MAAM,SAAd,iBAKN,kBAAC,EAAD,CACEnC,MAAOA,EACPC,SAAUA,EACVC,iBAAkBA,EAClBC,mBAAoBA,MC5CRkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eb430f9a.chunk.js","sourcesContent":["import axios from 'axios';\n\n\nconst api = axios.create({\n    baseURL: `https://pixabay.com/api`\n});\n\nexport default api;","import React from 'react';\nimport './styles.css';\n\nconst Canvas = ({ title, subtitle, verticalPosition, horizontalPosition }) => {\n    const imageSrc = 'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTuOSwzPM4D_w-qZ1OKk6RcYbKTqKi8WK04lfd-NLv03LDeiiBw';\n    \n    const showTitle = true;\n    const showSubtitle = true;\n\n    console.log(verticalPosition, horizontalPosition);\n\n    // Position\n    const position = 'centerCenter';\n    const titleColor = '#FFF';\n    const subtitleColor = '#FFF';\n\n    const textPosition = {\n        display: 'flex',\n        justifyContent: verticalPosition,\n    };\n\n    const textStyles = {\n        textAlign: horizontalPosition,\n        color: titleColor,\n        width: '100%',\n        margin: 0\n    };\n    \n    return (\n        <main className=\"mainScreen\">\n            <div className=\"textScreen\">\n                <div className=\"textContainer\">\n                    <div className={`${'basePosition'} ${position}`} style={textPosition}>\n                        {showTitle && (\n                            <h1 style={textStyles}>{title}</h1>\n                        )}\n                        {showSubtitle && (\n                            <p style={textStyles}>{subtitle}</p>\n                        )}\n                    </div>\n                </div>\n            </div>\n            <div className=\"filterScrren\" />\n            <div className=\"bg\">\n                <img src={imageSrc} alt=\"Test\"/>\n            </div>\n        </main>\n    );\n};\n\nexport default Canvas;\n","import React, { useState } from 'react';\nimport api from './services/api';\nimport Canvas from './Components/Canvas';\nimport './App.css';\n\nfunction App() {\n\n  const [title, setTitle] = useState('');\n  const [subtitle, setSubtitle] = useState('');\n  const [verticalPosition, setVerticalPosition] = useState('');\n  const [horizontalPosition, setHorizontalPosition] = useState('');\n\n  const pixabayKey = '8387701-5e4e7d3a7ec1162dbcc87ac47';\n\n  async function handleImageBackground() {\n    const response = await api.get(`?key=${pixabayKey}&q=yellow+flowers&image_type=photo&pretty=true`);\n    console.log(response.data);\n  };\n\n  return (\n    <div className=\"App\">\n\n      <header className=\"header\">\n        <button onClick={() => handleImageBackground()}>Buscar na API Backgrounds</button>\n        <div className=\"group\">\n          <label>Título</label>\n          <input onChange={e => setTitle(e.target.value)} type=\"text\" value={title} />\n        </div>\n        <div className=\"group\">\n          <label>Subtítulo</label>\n          <input onChange={e => setSubtitle(e.target.value)} type=\"text\" value={subtitle} />\n        </div>\n        <div className=\"group\">\n          <label>Texto Vertical</label>\n          <select onChange={e => setVerticalPosition(e.target.value)} type=\"text\" value={verticalPosition}>\n            <option value=\"\">Selecione a posição</option>\n            <option value=\"flex-start\">Em cima</option>\n            <option value=\"center\">No centro</option>\n            <option value=\"flex-end\">Em baixo</option>\n          </select>\n        </div>\n        <div className=\"group\">\n          <label>Texto Horizontal</label>\n          <select onChange={e => setHorizontalPosition(e.target.value)} type=\"text\" value={horizontalPosition}>\n            <option value=\"\">Selecione a posição</option>\n            <option value=\"left\">Na esquerda</option>\n            <option value=\"center\">No centro</option>\n            <option value=\"right\">Na direita</option>\n          </select>\n        </div>\n      </header>\n\n      <Canvas\n        title={title}\n        subtitle={subtitle}\n        verticalPosition={verticalPosition}\n        horizontalPosition={horizontalPosition}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}