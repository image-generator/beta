{"version":3,"sources":["images/portrait.svg","images/landscape.svg","services/api.js","config/index.js","Components/Categories/index.js","Components/ModalBackground/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","api","axios","create","baseURL","options","value","label","Categories","onSubmit","useState","selectedOption","setSelectedOption","className","e","a","async","preventDefault","onChange","console","log","handleChange","ModalBackground","backgrounds","onClick","handleClick","bg","localStorage","setItem","map","key","id","largeImageURL","src","alt","App","format","setFormat","modalBackground","setModalBackground","modalCategories","setCategories","setBackgrounds","type","setType","orientation","setOrientation","useEffect","getItem","pixabayKey","handleType","typeImage","imagePortrait","imageLandScape","style","background","data","get","response","hits","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c3c5878.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/portrait.9bd3abe0.svg\";","module.exports = __webpack_public_path__ + \"static/media/landscape.167f273a.svg\";","import axios from 'axios';\n\n\nconst api = axios.create({\n    baseURL: `https://pixabay.com/api`\n});\n\nexport default api;","export const options = [\n    { value: 'fashion', label: 'Moda' },\n    { value: 'nature', label: 'Natureza' },\n    { value: 'backgrounds', label: 'Fundos' },\n    { value: 'science', label: 'Ciência' },\n    { value: 'education', label: 'Educação' },\n    { value: 'people', label: 'Pessoas' },\n    { value: 'feelings', label: 'Sentimentos' },\n    { value: 'religion', label: 'Religião' },\n    { value: 'health', label: 'Saúde' },\n    { value: 'places', label: 'Locais' },\n    { value: 'animals', label: 'Animais' },\n    { value: 'industry', label: 'Indústria' },\n    { value: 'food', label: 'Comida' },\n    { value: 'computer', label: 'Computador' },\n    { value: 'sports', label: 'Esportes' },\n    { value: 'transportation', label: 'Transporte' },\n    { value: 'travel', label: 'Viagem' },\n    { value: 'buildings', label: 'Edifícios' },\n    { value: 'business', label: 'Negócios' },\n    { value: 'music', label: 'Música' },\n];","import React, { useState } from 'react';\nimport Select from 'react-select';\nimport { options } from '../../config';\nimport './styles.css';\n\n\nconst Categories = ({ onSubmit }) => {\n    const [selectedOption, setSelectedOption] = useState(null);\n\n/*     const options = [\n        { value: 'chocolate', label: 'Chocolate' },\n        { value: 'strawberry', label: 'Strawberry' },\n        { value: 'vanilla', label: 'Vanilla' },\n    ]; */\n    const handleChange = selectedOption => {\n        setSelectedOption(selectedOption);\n        console.log(`Option selected:`, selectedOption);\n    };\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n\n        await onSubmit({\n            selectedOption,\n        });\n    }\n\n    return (\n        <div className=\"searchWrapper\">\n            <div className=\"inputsWrapper\">\n                <form onSubmit={handleSubmit}>\n                    <Select\n                        value={selectedOption}\n                        onChange={(e) => handleChange(e)}\n                        options={options}\n                    />\n                    <button>Buscar Imagem</button>\n                </form>\n            </div>\n        </div>\n        \n    );\n};\n\nexport default Categories;","import React from 'react';\nimport './styles.css'\n\nconst ModalBackground = ({ backgrounds, onClick }) => {\n\n    function handleClick(e, bg) {\n        onClick()\n        localStorage.setItem('background', bg)\n    };\n\n    return (\n        <div className=\"modalWrapper\">\n            <div className=\"modal\">\n                {backgrounds.map(bg => (\n                    <div key={bg.id} className=\"card\" onClick={(e) => handleClick(e, bg.largeImageURL)}>\n                        {console.log(bg)}\n                        <img src={bg.largeImageURL} alt=\"\"/>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default ModalBackground;","import React, { useState, useEffect } from 'react';\nimport api from './services/api';\nimport Canvas from './Components/Canvas';\nimport './App.css';\nimport Categories from './Components/Categories';\nimport imagePortrait from './images/portrait.svg';\nimport imageLandScape from './images/landscape.svg';\nimport ModalBackground from './Components/ModalBackground';\n\nfunction App() {\n\n  const [format, setFormat] = useState(false);\n  const [modalBackground, setModalBackground] = useState(false);\n  const [modalCategories, setCategories] = useState(false);\n  const [backgrounds, setBackgrounds] = useState('');\n  const [type, setType] = useState('');\n  const [orientation, setOrientation] = useState('');\n\n  useEffect(() => {\n    localStorage.setItem('background', '')\n  }, [])\n\n  const portrait = {\n    width: '600px',\n    height: '600px',\n    background: localStorage.getItem('background'),\n  };\n\n  const landscape = {\n    width: '337px',\n    height: '600px',\n    background: localStorage.getItem('background'),\n  };\n  \n\n  const pixabayKey = '8387701-5e4e7d3a7ec1162dbcc87ac47';\n\n  async function handleImageBackground(data) {\n    console.log(data);\n    console.log('backgrounds', backgrounds)\n    if (backgrounds === '') {\n      const response = await api.get(`?key=${pixabayKey}&q=${data.selectedOption.value}&orientation=${orientation}&image_type=photo&pretty=true`);\n      setBackgrounds(response.data.hits);\n      setModalBackground(true);\n      console.log(response.data);\n    }\n\n  };\n\n\n  const handleType = (typeImage) => {\n    typeImage === 'horizontal' ? setType('horizontal') : setType('vertical');\n    setOrientation(typeImage);\n    setFormat(true);\n    setCategories(true);\n  }\n\n  function handlClick() {\n    setModalBackground(false)\n    setCategories(false);\n    console.log()\n  };\n\n  const reset = () => {\n    setFormat(false);\n  };\n\n  return (\n    <div className=\"App\">\n\n      {modalBackground && (\n        <ModalBackground onClick={handlClick} backgrounds={backgrounds} />\n      )}\n\n      <button onClick={reset} className=\"reset\">\n        Nova Imagem\n      </button>\n\n      <div className=\"canvasWrapper\">\n        {!format && (\n          <>\n            <span>Qual tipo de imagem quer criar?</span>\n            <div className=\"formatButtons\">\n              <button onClick={() => handleType('horizontal')}>\n                <img src={imagePortrait} alt=\"Imagem para Feed\"/>\n                Imagem para Feed\n              </button>\n              <button onClick={() => handleType('vertical')}>\n                <img src={imageLandScape} alt=\"Imagem para Stories\"/>\n                Imagem para Stories\n              </button>\n            </div>\n          </>\n        )}\n\n        {format && (\n          <div className={`${'canvas'} ${type === 'horizontal' ? 'portrait' : 'landscape'}`} style={{ background: `url('${localStorage.getItem('background')}')` }}>\n\n            {modalCategories && (\n              <Categories onSubmit={handleImageBackground} />\n            )}\n\n          </div>\n        )}\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}